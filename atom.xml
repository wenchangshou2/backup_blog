<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>犀牛</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-27T02:02:33.272Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>罗布</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>es6 模板字符串</title>
    <link href="http://yoursite.com/2017/07/27/es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2017/07/27/es6-模板字符串/</id>
    <published>2017-07-27T02:02:14.000Z</published>
    <updated>2017-07-27T02:02:33.272Z</updated>
    
    <content type="html"><![CDATA[<p>es6 新的特殊支持嵌入表达式，自动会处于``内所有的字符串。<br><a id="more"></a></p>
<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">\\传统的多行字符串</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'string line1 \n\</span></div><div class="line">string line2')</div><div class="line">\\es6多行字符串</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`string line</span></div><div class="line">string lin2`);</div></pre></td></tr></table></figure>
<h3 id="表达式插入"><a href="#表达式插入" class="headerlink" title="表达式插入"></a>表达式插入</h3><p>传统的方式采用的是字符串拼接的方式进行，通过+号进行拼接</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 传统方式</span></div><div class="line"> <span class="keyword">let</span> x=<span class="number">1</span>;</div><div class="line"> <span class="keyword">let</span> y=<span class="number">2</span>;</div><div class="line"> <span class="built_in">console</span>.log(<span class="string">'x='</span>+(a+b)+<span class="string">';y='</span>+(a*b))</div><div class="line"> <span class="comment">//es6 语法</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="string">'x='</span>+(a+b)+<span class="string">';y='</span>+(a*b));</div><div class="line"> <span class="built_in">console</span>.log(<span class="string">`x=<span class="subst">$&#123;x+y&#125;</span>,y=<span class="subst">$&#123;x*y&#125;</span>`</span>);</div></pre></td></tr></table></figure>
<h3 id="带标签的模板字符串"><a href="#带标签的模板字符串" class="headerlink" title="带标签的模板字符串"></a>带标签的模板字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//strings 存放所有的字符串字面的数组</span></div><div class="line"><span class="comment">//values 存放第一个数组紧随的参数</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">tag3</span>(<span class="params">strings,...values</span>)</span>&#123;</div><div class="line"> 					  <span class="keyword">let</span> a = <span class="number">5</span>;</div><div class="line">					  <span class="keyword">let</span> b = <span class="number">10</span>;</div><div class="line">                <span class="built_in">console</span>.log(strings[<span class="number">0</span>]);<span class="comment">//hello</span></div><div class="line">                <span class="built_in">console</span>.log(strings[<span class="number">1</span>]);<span class="comment">//world</span></div><div class="line">                <span class="built_in">console</span>.log(strings[<span class="number">2</span>]);<span class="comment">//</span></div><div class="line">                <span class="built_in">console</span>.log(values[<span class="number">0</span>]);<span class="comment">//15</span></div><div class="line">                <span class="built_in">console</span>.log(values[<span class="number">1</span>]);<span class="comment">//50</span></div><div class="line">                <span class="keyword">return</span> <span class="string">"hello world"</span></div><div class="line"> &#125;</div><div class="line">  tag3 <span class="string">`Hello <span class="subst">$&#123;a+b&#125;</span> world <span class="subst">$&#123; a*b &#125;</span>`</span>;</div><div class="line">  <span class="comment">//out:hello world</span></div></pre></td></tr></table></figure>
<p>通过传入的参数来返回一个函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">template</span>(<span class="params">strings,...keys</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">...values</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> dict=values[values.length<span class="number">-1</span>]||&#123;&#125;;  <span class="comment">//A                 </span></div><div class="line">		<span class="keyword">var</span> result=[strings[<span class="number">0</span>]];</div><div class="line">		keys.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key,i</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> value=<span class="built_in">Number</span>.isInteger(key)?values[key]:dict[key];              result.push(value,strings[i+<span class="number">1</span>]);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">return</span> result.join(<span class="string">' '</span>);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> t1Closure=template <span class="string">`<span class="subst">$&#123;<span class="number">0</span>&#125;</span><span class="subst">$&#123;<span class="number">1</span>&#125;</span><span class="subst">$&#123;<span class="number">0</span>&#125;</span>!`</span>;<span class="comment">//返回的是一个函数</span></div><div class="line"><span class="built_in">console</span>.log(t1Closure(<span class="string">'Y'</span>,<span class="string">'A'</span>));<span class="comment">//Y A Y</span></div></pre></td></tr></table></figure>
<h3 id="不转义字符串"><a href="#不转义字符串" class="headerlink" title="不转义字符串"></a>不转义字符串</h3><p>在String.raw()输出不转义的字符串,输出原始的字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">strings, ...values</span>) </span>&#123;</div><div class="line"><span class="comment">/*</span></div><div class="line">	倘若不采用raw输出的会直接进行换行 </div><div class="line">*/</div><div class="line">  <span class="built_in">console</span>.log(strings.raw[<span class="number">0</span>]); </div><div class="line">  <span class="comment">// "string text line 1 \n string text line 2"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">tag<span class="string">`string text line 1 \n string text line 2`</span>;</div></pre></td></tr></table></figure>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断是否具有权限，倘若没有抛出一个异常</span></div><div class="line"><span class="comment">//$&#123;user.name&#125;和$&#123;action&#125;是两个点占位号，会自动将值带入到该字符串</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">authorize</span>(<span class="params">user, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!user.hasPrivilege(action)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</div><div class="line">      <span class="string">`用户 <span class="subst">$&#123;user.name&#125;</span> 未被授权执行 <span class="subst">$&#123;action&#125;</span> 操作。`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6 新的特殊支持嵌入表达式，自动会处于``内所有的字符串。&lt;br&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript6  Symbol </title>
    <link href="http://yoursite.com/2017/07/27/ECMAScript6-Symbol/"/>
    <id>http://yoursite.com/2017/07/27/ECMAScript6-Symbol/</id>
    <published>2017-07-27T01:57:46.000Z</published>
    <updated>2017-07-27T01:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>es6之前所有的属性名都是字符串类型，容易造成属性名的冲突。所以在es6新增了一种数据类型Symbol，表示<strong>独一无二</strong>的值。Symbol并不是一个对象，所以不能通过new的方法进行创建，同时也不能添加属性。<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s=<span class="built_in">Symbol</span>();</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s)<span class="comment">//out:symbol</span></div></pre></td></tr></table></figure>
<p>Symbol与字符串处理</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1=<span class="built_in">Symbol</span>(<span class="string">'foo'</span>);通过字符串进行构造</div><div class="line"><span class="keyword">var</span> s2=<span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</div><div class="line"><span class="built_in">console</span>.log(s1)<span class="comment">//out:symbol(foo)</span></div><div class="line"><span class="built_in">console</span>.log(s2)<span class="comment">//out:symbol(bar)</span></div><div class="line"><span class="built_in">console</span>.log(s1.toString())</div><div class="line"><span class="built_in">console</span>.log(s2.toString())</div></pre></td></tr></table></figure>
<p>Symbol函数的参数只表示对当前Symbol值的描述，即使两个Symbol的参数相同也并不相等.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1=<span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">var</span> s2=<span class="built_in">Symbol</span>();</div><div class="line"><span class="built_in">console</span>.log(s1==s2);<span class="comment">//out:flash</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> s1=<span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</div><div class="line"><span class="keyword">var</span> s2=<span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">console</span>.log(s1==s2);<span class="comment">//out:flash</span></div></pre></td></tr></table></figure>
<p>Symbol通过Object.getOwnPropertySymbols来返回一个数组<br>Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和Symbol键名。</p>
<p><strong>Symbol.for(name)</strong>，接受一个字符串，搜索是否存在着为name的Symbol的对象，如果有返回这个Symbol值，否则创建一个以该字符串为名称的Symbol字符。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</div><div class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line">s1 === s2 <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p><strong>利用Symbol创建单例模式</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mod.js文件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo=<span class="string">'hello'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!global._foo)&#123;</div><div class="line">    global._foo=<span class="keyword">new</span> A();</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports=global._foo;</div></pre></td></tr></table></figure>
<p>因为global._foo是可写的对象，一旦其他改写了该对象就会使其他的加载mod.js模块失效</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="keyword">var</span> mod=<span class="built_in">require</span>(<span class="string">'./mod.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(mod.foo);</div></pre></td></tr></table></figure>
<p>下面采用Symbol的方式FOO_KEY本身不可必定，通过Symbol.for可能保证获取到的foo对应的Symbol对象是唯一的。但同样存在着一个问题就是用户一旦清空缓存的时候会重新加载致使该模块失效 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mod2.js</span></div><div class="line"><span class="keyword">const</span> FOO_KEY=<span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo=<span class="string">'hello'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!global[FOO_KEY])&#123;</div><div class="line">    global[FOO_KEY]=<span class="keyword">new</span> A();</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports=global[FOO_KEY];</div><div class="line"></div><div class="line"><span class="comment">//main2.js</span></div><div class="line"><span class="keyword">var</span> a=<span class="built_in">require</span>(<span class="string">'./mod2.js'</span>);</div><div class="line">global[<span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>)]=<span class="number">123</span>;</div><div class="line"><span class="built_in">console</span>.log(global[<span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>)]);</div></pre></td></tr></table></figure>
<h4 id="属性及方法"><a href="#属性及方法" class="headerlink" title="属性及方法"></a>属性及方法</h4><blockquote>
<p>属性<br><strong>Symbol.length</strong><br>长度属性值为1。<br><strong>Symbol.name</strong><br>仅Chrome/v8。返回符号描述。<br><strong>Symbol.prototype</strong><br>描述符号构造函数的原型。<br>众所周知的符号<br>除了你自己的符号，JavaScript还内建了一些在ECMAScript 5 之前没有暴露给开发者的符号，它们代表了内部语言行为。这些符号可以使用以下属性访问：<br>迭代 symbols<br><strong>Symbol.iterator</strong><br>一个返回一个对象默认迭代器的方法。使用 for…of.<br>正则表达式 symbols<br><strong>Symbol.match</strong><br>一个用于对字符串进行匹配的方法，也用于确定一个对象是否可以作为正则表达式使用。使用 String.prototype.match().<br><strong>Symbol.replace</strong><br>一个替换匹配字符串的子串的方法. 使用 String.prototype.replace().<br><strong>Symbol.search</strong><br>一个返回一个字符串中与正则表达式相匹配的索引的方法。使用String.prototype.search().<br><strong>Symbol.split</strong><br>一个在匹配正则表达式的索引处拆分一个字符串的方法.。使用 String.prototype.split().<br>其他 symbols<br><strong>Symbol.hasInstance</strong><br>一个确定一个构造器对象识别的对象是否为它的实例的方法。使用 instanceof.<br><strong>Symbol.isConcatSpreadable</strong><br>一个布尔值，表明一个对象是否应该flattened为它的数组元素。使用Array.prototype.concat().<br><strong>Symbol.unscopables</strong><br>拥有和继承属性名的一个对象的值被排除在与环境绑定的相关对象外。<br><strong>Symbol.species</strong><br>一个用于创建派生对象的构造器函数。.<br><strong>Symbol.toPrimitive</strong><br>一个将对象转化为基本数据类型的方法。<br><strong>Symbol.toStringTag</strong><br>用于对象的默认描述的字符串值。使用Object.prototype.toString().<br>方法<br><strong>Symbol.for(key)</strong><br>使用给定的key搜索现有符号，如果找到则返回符号。否则将得到一个新的使用给定的key在全局符号注册表中创建的符号。<br><strong>Symbol.keyFor(sym)</strong><br>为给定符号从全局符号注册表中检索一个共享符号键。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6之前所有的属性名都是字符串类型，容易造成属性名的冲突。所以在es6新增了一种数据类型Symbol，表示&lt;strong&gt;独一无二&lt;/strong&gt;的值。Symbol并不是一个对象，所以不能通过new的方法进行创建，同时也不能添加属性。&lt;br&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>meteor 加载静态文件</title>
    <link href="http://yoursite.com/2017/07/27/meteor-%E5%8A%A0%E8%BD%BD%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/07/27/meteor-加载静态文件/</id>
    <published>2017-07-27T01:54:17.000Z</published>
    <updated>2017-07-27T01:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>meteor 加载静态文件<br><a id="more"></a></p>
<h1 id="meteor-加载外部资源文件"><a href="#meteor-加载外部资源文件" class="headerlink" title="meteor 加载外部资源文件"></a>meteor 加载外部资源文件</h1><p>在很多时候开发的时候我们需要导入一些外部的数据到程序当中，这些数据可能存放在csv,XML.json之类的文件当中，我们就将其导入到程序当中，使其能够供全局进行访问。</p>
<p><strong>private/json/city.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"010"</span>,<span class="attr">"city"</span>:<span class="string">"北京"</span>, <span class="attr">"pinyin"</span>: <span class="string">"beijing"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"021"</span>,<span class="attr">"city"</span>:<span class="string">"上海"</span>, <span class="attr">"pinyin"</span>:<span class="string">"shanghai"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0571"</span>,<span class="attr">"city"</span>:<span class="string">"杭州"</span>, <span class="attr">"pinyin"</span>:<span class="string">"hangzhou"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0574"</span>,<span class="attr">"city"</span>:<span class="string">"宁波"</span>, <span class="attr">"pinyin"</span>:<span class="string">"ningbo"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0573"</span>,<span class="attr">"city"</span>:<span class="string">"嘉兴"</span>, <span class="attr">"pinyin"</span>:<span class="string">"jiaxing"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0575"</span>,<span class="attr">"city"</span>:<span class="string">"绍兴"</span>, <span class="attr">"pinyin"</span>:<span class="string">"shaoxing"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0577"</span>,<span class="attr">"city"</span>:<span class="string">"温州"</span>, <span class="attr">"pinyin"</span>:<span class="string">"wenzhou"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0580"</span>,<span class="attr">"city"</span>:<span class="string">"舟山"</span>, <span class="attr">"pinyin"</span>:<span class="string">"zhoushan"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0572"</span>,<span class="attr">"city"</span>:<span class="string">"湖州"</span>, <span class="attr">"pinyin"</span>:<span class="string">"huzhou"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0579"</span>,<span class="attr">"city"</span>:<span class="string">"金华"</span>, <span class="attr">"pinyin"</span>:<span class="string">"jinhua"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0578"</span>,<span class="attr">"city"</span>:<span class="string">"丽水"</span>, <span class="attr">"pinyin"</span>:<span class="string">"lishui"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0576"</span>,<span class="attr">"city"</span>:<span class="string">"台州"</span>, <span class="attr">"pinyin"</span>:<span class="string">"taizhou"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> &#123;<span class="attr">"code"</span>:<span class="string">"0570"</span>,<span class="attr">"city"</span>:<span class="string">"衢州"</span>, <span class="attr">"pinyin"</span>:<span class="string">"quzhou"</span>,<span class="attr">"province"</span>: <span class="string">"浙江"</span>&#125;,</div><div class="line"> ]</div></pre></td></tr></table></figure>
<blockquote>
<p>特殊注意是private文件夹的数据是不提供给客户端</p>
</blockquote>
<p>上面的是包含城市名称以及区号的json数据，我们将其保存在文件当中，这里我们可以通过Assets API来访问以及处理相应的数据。</p>
<p><strong>server/main.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Meteor &#125; <span class="keyword">from</span> <span class="string">'meteor/meteor'</span>;</div><div class="line"></div><div class="line">Meteor.startup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> cityList=<span class="built_in">JSON</span>.parse(Assets.getText(<span class="string">'json/city.json'</span>))</div><div class="line">  _.each(cityList, <span class="function"><span class="keyword">function</span>(<span class="params">city</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(city);</div><div class="line">  &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>上面的代码会将所有的数据进行输出，但是有的时候这些数据可以会被其他的项目需要，这里我们需要通过添加一个package来解决，同时我们只可以将这个包上传到<a href="https://atmospherejs.com" target="_blank" rel="external">atmospherejs</a><br>我们需要将之前的json文件移到cityjson包，最终的目录文件如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">└── cityjson</div><div class="line">    ├── README.md</div><div class="line">    ├── city.json</div><div class="line">    ├── cityjson-tests.js</div><div class="line">    ├── cityjson.js</div><div class="line">    └── package.js</div></pre></td></tr></table></figure>
<p><strong>package.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Package.describe(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'wenchangshou:cityjson'</span>,</div><div class="line">  <span class="attr">version</span>: <span class="string">'0.0.1'</span>,</div><div class="line">  <span class="comment">// Brief, one-line summary of the package.</span></div><div class="line">  summary: <span class="string">'获取国内的所有的城市名称以及区号'</span>,</div><div class="line">  <span class="comment">// URL to the Git repository containing the source code for this package.</span></div><div class="line">  git: <span class="string">''</span>,</div><div class="line">  <span class="comment">// By default, Meteor will default to using README.md for documentation.</span></div><div class="line">  <span class="comment">// To avoid submitting documentation, set this field to null.</span></div><div class="line">  documentation: <span class="string">'README.md'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">Package.onUse(<span class="function"><span class="keyword">function</span> (<span class="params">api</span>) </span>&#123;</div><div class="line">  <span class="comment">//  api.versionsFrom('1.4.2.7');</span></div><div class="line">  api.versionsFrom(<span class="string">'1.0'</span>)</div><div class="line">  api.export(<span class="string">'cityList'</span>, <span class="string">'server'</span>);</div><div class="line">  api.addAssets(<span class="string">'city.json'</span>, <span class="string">'server'</span>)</div><div class="line">  api.addFiles(<span class="string">'cityjson.js'</span>, <span class="string">'server'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">Package.onTest(<span class="function"><span class="keyword">function</span>(<span class="params">api</span>) </span>&#123;</div><div class="line">  api.use(<span class="string">'ecmascript'</span>);</div><div class="line">  api.use(<span class="string">'tinytest'</span>);</div><div class="line">  api.use(<span class="string">'wenchangshou:cityjson'</span>);</div><div class="line">  api.mainModule(<span class="string">'cityjson-tests.js'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>cityjson.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cityCollection=<span class="built_in">JSON</span>.parse(Assets.getText(<span class="string">'city.json'</span>));</div><div class="line">cityList=&#123;<span class="attr">city</span>:cityCollection&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Assets.getText 可以从当前的包内进行调用 ，通过addFiles进行数据的暴露</li>
<li>之后我们需要读取以及解析数据，city里面包含了所有的城市信息，并且我们通过cityList这个全局变量进行数据的暴露</li>
<li>我们通过 api.addAssets将静态的文件导入到包中，通过Assets.getText进行访问</li>
</ul>
<h3 id="meteor-包上传"><a href="#meteor-包上传" class="headerlink" title="meteor 包上传"></a>meteor 包上传</h3><p>上面的操作我们已经创建了一个能够使用的包了，这时候我们需要将这个包上传，方便将来的使用</p>
<blockquote>
<p>meteor publish –create </p>
</blockquote>
<p>上传成功之后我们可以直接访问<a href="https://atmospherejs.com/wenchangshou/cityjson" target="_blank" rel="external">cityjson</a>来查看我们上传的包，如下图所示<br><img src="http://o7ez1faxc.bkt.clouddn.com/2017-02-18-屏幕快照 2017-02-18 下午5.37.22.png" alt="屏幕快照 2017-02-18 下午5.37.22"></p>
<p>上传成功之后我们将pckages/cityjson目录删除</p>
<blockquote>
<p>rm -rf packages/cityjson</p>
</blockquote>
<p>我们在主目录当中添加我们上传的包,其中wenchangshou是我的用户名</p>
<blockquote>
<p>meteor add wenchangshou:cityjson</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;meteor 加载静态文件&lt;br&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>nodejs+express+mongo 实际一套增删改查的接口</title>
    <link href="http://yoursite.com/2017/07/26/nodejs-express-mongo-%E5%AE%9E%E9%99%85%E4%B8%80%E5%A5%97%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2017/07/26/nodejs-express-mongo-实际一套增删改查的接口/</id>
    <published>2017-07-26T06:59:40.000Z</published>
    <updated>2017-07-26T07:00:05.000Z</updated>
    
    <content type="html"><![CDATA[<p> 通过提交的类型来执行相应的动作 delete 删除对象 put 更新对象 get 获取对象 post 创建对象<br> <a id="more"></a></p>
<h1 id="nodejs-mongoose-express-实现数据的增删改查"><a href="#nodejs-mongoose-express-实现数据的增删改查" class="headerlink" title="nodejs+mongoose+express 实现数据的增删改查"></a>nodejs+mongoose+express 实现数据的增删改查</h1><h4 id="定义数据模型"><a href="#定义数据模型" class="headerlink" title="定义数据模型"></a>定义数据模型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bear.js</span></div><div class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="keyword">var</span> Schema=mongoose.Schema;</div><div class="line"><span class="keyword">var</span> BearSchema=<span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>:<span class="built_in">String</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports=mongoose.model(<span class="string">'Bear'</span>,BearSchema);</div></pre></td></tr></table></figure>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"node-mongo-express"</span>,</div><div class="line">    <span class="attr">"version"</span>:<span class="string">"1.0.0"</span>,</div><div class="line">    <span class="attr">"description"</span>:<span class="string">"实现数据的增删改查"</span>,</div><div class="line">    <span class="attr">"main"</span>:<span class="string">"server.js"</span>,</div><div class="line">    <span class="attr">"license"</span>:<span class="string">"MIT"</span>,</div><div class="line">    <span class="attr">"dependencies"</span>:&#123;</div><div class="line">        <span class="attr">"express"</span>:<span class="string">"~4.0.0"</span>,</div><div class="line">        <span class="attr">"mongoose"</span>:<span class="string">"~3.6.13"</span>,</div><div class="line">        <span class="attr">"body-parser"</span>:<span class="string">"~1.0.1"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/myapp'</span>)</div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</div><div class="line"><span class="keyword">var</span> Bear = <span class="built_in">require</span>(<span class="string">'./app/models/bear'</span>);</div><div class="line">app.use(bodyParser.json());</div><div class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">8080</span>;</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line">router.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;<span class="comment">//增加</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'触发中间件.'</span>);</div><div class="line">    next();</div><div class="line">&#125;);</div><div class="line">router.route(<span class="string">'/bears'</span>).post(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;<span class="comment">//post请求来增加一条数据</span></div><div class="line">    <span class="keyword">var</span> bear = <span class="keyword">new</span> Bear();</div><div class="line">    bear.name = req.body.name;</div><div class="line">    bear.save(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err)</div><div class="line">            res.send(err);</div><div class="line">        res.json(&#123; <span class="attr">message</span>: <span class="string">'Bear created!'</span> &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line">router.route(<span class="string">'/bears/:bear_id'</span>)</div><div class="line">.get(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;<span class="comment">//根据id来查找对应的数据</span></div><div class="line">    <span class="built_in">console</span>.log(req.params.bear_id);</div><div class="line">    Bear.findById(req.params.bear_id, <span class="function"><span class="keyword">function</span> (<span class="params">err, bear</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err)</div><div class="line">            res.send(err);</div><div class="line">        res.json(bear);</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line">.put(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;<span class="comment">//通过put请求来更新数据</span></div><div class="line">    Bear.findById(req.params.bear_id, <span class="function"><span class="keyword">function</span> (<span class="params">err, bear</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err)</div><div class="line">            res.send(err);</div><div class="line">        bear.name = req.body.name;</div><div class="line">        bear.save(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err)</div><div class="line">                res.send(err);</div><div class="line">            res.json(&#123; <span class="attr">message</span>: <span class="string">'Bear updated!'</span> &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line">.delete(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;<span class="comment">//删除数据</span></div><div class="line">    Bear.remove(&#123;</div><div class="line">        <span class="attr">_id</span>: req.params.bear_id</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, bear</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err)</div><div class="line">            res.send(err);</div><div class="line">        res.json(&#123; <span class="attr">message</span>: <span class="string">'Successfully deleted'</span> &#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;<span class="comment">//访问首页</span></div><div class="line">    res.json(&#123; <span class="attr">message</span>: <span class="string">'hooray!welcome to our api!'</span> &#125;);</div><div class="line">&#125;);</div><div class="line">app.use(<span class="string">'/api'</span>, router);</div><div class="line"></div><div class="line"></div><div class="line">app.listen(port);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Magic happens on port "</span> + port);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 通过提交的类型来执行相应的动作 delete 删除对象 put 更新对象 get 获取对象 post 创建对象&lt;br&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>bluebird 笔记</title>
    <link href="http://yoursite.com/2017/07/24/bluebird-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/24/bluebird-笔记/</id>
    <published>2017-07-24T06:47:51.000Z</published>
    <updated>2017-07-26T06:49:01.792Z</updated>
    
    <content type="html"><![CDATA[<p>有关bluebird的常用操作<br><a id="more"></a></p>
<h1 id="bluebird-笔记"><a href="#bluebird-笔记" class="headerlink" title="bluebird 笔记"></a>bluebird 笔记</h1><h2 id="将传统方法封闭成promise方式"><a href="#将传统方法封闭成promise方式" class="headerlink" title="将传统方法封闭成promise方式"></a>将传统方法封闭成promise方式</h2><p> Promise.promisify能够将原有的函数封装成promise的调用方式。<br> 下面的是传统的异步调用方式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;readFile&#125; <span class="keyword">from</span> <span class="string">'fs'</span></div><div class="line">readFile(<span class="string">'file1.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'read file error'</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`read file data:<span class="subst">$&#123;data.toString()&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>利用Promise.promisify转换函数后的调用方式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>)</div><div class="line"><span class="keyword">var</span> readFile = <span class="built_in">Promise</span>.promisify(<span class="built_in">require</span>(<span class="string">"fs"</span>).readFile);</div><div class="line">readFile(<span class="string">"file1.txt"</span>,<span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`read file data:<span class="subst">$&#123;contents&#125;</span>`</span>);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'error read file'</span>,e);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>除了用Promise.prosisify之后bluebird还提供了一种能够转换整个调用对象的方法 Promise.promisifyAll。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>)</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">Promise</span>.promisifyAll(<span class="built_in">require</span>(<span class="string">"fs"</span>));</div><div class="line">fs.readFile(<span class="string">"file1.txt"</span>,<span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`read file data:<span class="subst">$&#123;contents&#125;</span>`</span>);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'error read file'</span>,e);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="处理多个promise返回值"><a href="#处理多个promise返回值" class="headerlink" title="处理多个promise返回值"></a>处理多个promise返回值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>);</div><div class="line"><span class="keyword">var</span> fs=<span class="built_in">Promise</span>.promisifyAll(<span class="built_in">require</span>(<span class="string">"fs"</span>))</div><div class="line"><span class="built_in">Promise</span>.all([</div><div class="line">    fs.readFileAsync(<span class="string">"file1.txt"</span>),</div><div class="line">    fs.readFileAsync(<span class="string">"file2.txt"</span>)</div><div class="line">]).spread(<span class="function"><span class="keyword">function</span>(<span class="params">file1text, file2text</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (file1text === file2text) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"files are equal"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"files are not equal"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码的代码是异步读取file1.txt和file2.txt文件，并且将文件的内容存入到file1text和file2text中，一旦两个文件的内容相同输出files are equal,不相同输出files are not equal。</p>
<h2 id="多个promise-处理"><a href="#多个promise-处理" class="headerlink" title="多个promise 处理"></a>多个promise 处理</h2><blockquote>
<p>Promise.join(</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Promise&lt;any&gt;|any values...,</div><div class="line">function handler</div></pre></td></tr></table></figure>
<p>) -&gt; Promise</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>);</div><div class="line"><span class="keyword">var</span> join = <span class="built_in">Promise</span>.join;</div><div class="line"></div><div class="line">join(getPictures(), getComments(), getTweets(),</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">pictures, comments, tweets</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"in total: "</span> + pictures.length + comments.length + tweets.length);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的的代码调用 getPictures(), getComments(), getTweets()三个异步的操作，同时输出操作的结果<br>下面的代码完成赞同于上面的代码，只不过将Promise.join换成了Promise.all，并且传一个数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>);</div><div class="line"><span class="keyword">var</span> join = <span class="built_in">Promise</span>.join;</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all([getPictures(), getComments(), getTweets()],</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">pictures, comments, tweets</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"in total: "</span> + pictures.length + comments.length + tweets.length);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Promise-props"><a href="#Promise-props" class="headerlink" title="Promise.props"></a>Promise.props</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.props(&#123;</div><div class="line">    <span class="attr">file1</span>: fs.readFileAsync(<span class="string">"file1.txt"</span>),</div><div class="line">    <span class="attr">file2</span>: fs.readFileAsync(<span class="string">"file2.txt"</span>)</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result.file1,result.file2);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>props能将将返回的结果放置在一个Object对象当中，可以通过result.file1来访问fs.readFileAsync(“file1.txt”)的文件内容</p>
<h2 id="Promise-some"><a href="#Promise-some" class="headerlink" title="Promise.some"></a>Promise.some</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.some([</div><div class="line">    ping(<span class="string">"ns1.example.com"</span>),</div><div class="line">    ping(<span class="string">"ns2.example.com"</span>),</div><div class="line">    ping(<span class="string">"ns3.example.com"</span>),</div><div class="line">    ping(<span class="string">"ns4.example.com"</span>)</div><div class="line">], <span class="number">2</span>).spread(<span class="function"><span class="keyword">function</span>(<span class="params">first, second</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(first, second);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面通过Promise.some方法来调用四次ping请求，输出其中最快的二次请求的信息。</p>
<h3 id="Promise-finally"><a href="#Promise-finally" class="headerlink" title="Promise.finally"></a>Promise.finally</h3><p>finally方法有点类似于c++中的try catch..finaly，不过promise过程是否成功，都将调用finally的方法，可以在这个方法里面写一些资源的释放之类的语句。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span>=<span class="built_in">require</span>(<span class="string">'bluebird'</span>)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_setTimeout</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(resolve(<span class="string">'resolve'</span>),time);</div><div class="line">  &#125;).finally(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>);</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">_setTimeout(<span class="number">2000</span>).then(<span class="function">(<span class="params">content</span>)=&gt;</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(content);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Promises-map"><a href="#Promises-map" class="headerlink" title="Promises.map"></a>Promises.map</h3><p>这个方法可以遍历Object,再通过遍历的值来直接调用 Promise方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span>=<span class="built_in">require</span>(<span class="string">'bluebird'</span>)</div><div class="line"><span class="keyword">var</span> fs=<span class="built_in">Promise</span>.promisifyAll(<span class="built_in">require</span>(<span class="string">"fs"</span>))</div><div class="line"><span class="keyword">var</span> promise=[]</div><div class="line"><span class="keyword">var</span> filesNames=[]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)&#123;</div><div class="line">  promise.push(fs.readFileAsync(<span class="string">`file<span class="subst">$&#123;i&#125;</span>.txt`</span>))</div><div class="line">  filesNames.push(<span class="string">`file<span class="subst">$&#123;i&#125;</span>.txt`</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用传统的Promise.all方法</span></div><div class="line"><span class="built_in">Promise</span>.all(promise).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'all'</span>);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//通过map来批量调用</span></div><div class="line"><span class="built_in">Promise</span>.map(filesNames, (fileName) =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> fs.readFileAsync(fileName)</div><div class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'done'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Promise-reduct"><a href="#Promise-reduct" class="headerlink" title="Promise.reduct"></a>Promise.reduct</h3><p>这个方法可以顺序的执行promise</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.reduce([<span class="string">"file1.txt"</span>, <span class="string">"file2.txt"</span>, <span class="string">"file3.txt"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">total, fileName</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fs.readFileAsync(fileName, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> total + <span class="built_in">parseInt</span>(contents, <span class="number">10</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;, <span class="number">0</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">total</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(total);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码段是，顺序的读取file1,file2,file3三个文件的内容，并且将内容转换成整形，最终输出累加后的数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关bluebird的常用操作&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>mysql 自动化脚本</title>
    <link href="http://yoursite.com/2016/12/26/mysql-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2016/12/26/mysql-自动化脚本/</id>
    <published>2016-12-26T06:57:13.000Z</published>
    <updated>2017-07-26T06:58:27.271Z</updated>
    
    <content type="html"><![CDATA[<p>shell写的脚本自动部署mysql<br><a id="more"></a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/ash</div><div class="line"></div><div class="line">USER="root"</div><div class="line">NEWUSER="xxx"</div><div class="line">PASSWORD="xxxx"</div><div class="line">NEWPASSWORD="xxxxxxxxxx"</div><div class="line">DATE=`date +%Y/%m/%d`</div><div class="line">OUTPUT="/mnt/data/database/$DATE"</div><div class="line">OPERATOR="export"</div><div class="line">FILES="/tmp/database/*"</div><div class="line">DATABASEPATH="/mnt/db/mysql"</div><div class="line">TMPPATH="/mnt/db/tmp"</div><div class="line">echo $OUTPUT</div><div class="line">[ ! -d "$OUTPUT" ] &amp;&amp; &#123;</div><div class="line">    echo "mkdir $OUTPUT"</div><div class="line">    mkdir -p $OUTPUT</div><div class="line">&#125;</div><div class="line"><span class="meta">#</span>数据为初始化</div><div class="line">action_init()&#123;</div><div class="line">    flag=$(uci get -q system.@general[0].databaseinit)</div><div class="line">    [ ! -z "$flag" ] &amp;&amp; return</div><div class="line">    [  -z "$flag" ] &amp;&amp; &#123;</div><div class="line">        section=$(uci get -q system.@general[0])</div><div class="line">        [ -z "$section" ] &amp;&amp;&#123;</div><div class="line">            uci add system general</div><div class="line">        &#125;</div><div class="line">        uci set system.@general[0].databaseinit=1</div><div class="line">        uci commit system</div><div class="line">    &#125;</div><div class="line">    [ -d "$DATABASEPATH" ] &amp;&amp; rm -rf $DATABASEPATH</div><div class="line">    [ -d "$TMPPATH" ] &amp;&amp; rm -rf $TMPPATH</div><div class="line">    sed -i "s,^datadir.*,datadir         = \"$DATABASEPATH\",g" /etc/my.cnf</div><div class="line">    sed -i 's,^tmpdir.*,tmpdir          = "/mnt/db/tmp",g' /etc/my.cnf</div><div class="line">    [ ! -d "$DATABASEPATH" ] &amp;&amp; mkdir -p $DATABASEPATH</div><div class="line">    [ ! -d "$TMPPATH" ] &amp;&amp; mkdir -p $TMPPATH</div><div class="line">    mysql_install_db --force</div><div class="line">    /etc/init.d/mysqld start</div><div class="line">    /etc/init.d/mysqld enable</div><div class="line">    mysqladmin -u  $USER password "$PASSWORD"</div><div class="line">    [ -f /tmp/adduser.sql ] &amp;&amp; rm -rf /tmp/adduser.sql</div><div class="line">    echo "insert into mysql.user(Host,User,Password) values(\"localhost\",\"$NEWUSER\",password(\"$NEWPASSWORD\"));"&gt;/tmp/adduser.sql</div><div class="line">    echo "GRANT ALL PRIVILEGES ON *.* TO \"$NEWUSER\"@\"localhost\" IDENTIFIED BY \"$NEWPASSWORD\"; "</div><div class="line">    echo "GRANT ALL PRIVILEGES ON *.* TO \"$NEWUSER\"@\"localhost\" IDENTIFIED BY \"$NEWPASSWORD\"; "&gt;&gt;/tmp/adduser.sql</div><div class="line">    echo "flush privileges;"&gt;&gt;/tmp/adduser.sql</div><div class="line">    mysql -u $USER -p$PASSWORD &lt; /tmp/adduser.sql</div><div class="line">    rm -rf /tmp/adduser.sql</div><div class="line">&#125;</div><div class="line"><span class="meta">#</span>数据库导出</div><div class="line">action_export()&#123;</div><div class="line">    databases=`mysql -u $USER -p$PASSWORD -e "SHOW DATABASES;" | tr -d "| " | grep -v Database`</div><div class="line">    echo "backup start"</div><div class="line">    for db in $databases; do</div><div class="line">        if [[ "$db" != "information_schema" ]] &amp;&amp; [[ "$db" != "performance_schema" ]] &amp;&amp; [[ "$db" != "mysql" ]] &amp;&amp; [[ "$db" != _* ]] ; then</div><div class="line">            echo "Dumping database: $db"</div><div class="line">            [ -f $OUTPUT/`date +%Y%m%d`.$db.sql ] &amp;&amp; &#123;</div><div class="line">                echo "rm sql file"</div><div class="line">                rm -rf $OUTPUT/`date +%Y%m%d`.$db.sql</div><div class="line">            &#125;</div><div class="line">            mysqldump -u $NEWUSER -p$NEWPASSWORD --databases $db &gt; $OUTPUT/`date +%Y%m%d`.$db.sql</div><div class="line">            [ -f $OUTPUT/`date +%Y%m%d`.$db.sql.gz ] &amp;&amp; &#123;</div><div class="line">                echo "rm file"</div><div class="line">                rm -rf $OUTPUT/`date +%Y%m%d`.$db.sql.gz</div><div class="line">            &#125;</div><div class="line">            gzip $OUTPUT/`date +%Y%m%d`.$db.sql</div><div class="line">            rm -rf $OUTPUT/`date +%Y%m%d`.$db.sql</div><div class="line">        fi</div><div class="line">    done</div><div class="line">    echo "backup end"</div><div class="line">&#125;</div><div class="line"><span class="meta">#</span>数据库导入</div><div class="line">action_import()&#123;</div><div class="line">    for f in $FILES</div><div class="line">    do</div><div class="line">        [ -f "$f" ] &amp;&amp;&#123;</div><div class="line">            echo "Processing $f file..."</div><div class="line">            mysql -u $NEWUSER -p$NEWPASSWORD &lt; $f</div><div class="line">        &#125;</div><div class="line">    done</div><div class="line">&#125;</div><div class="line">[ ! -z "$1" ] &amp;&amp; OPERATOR=$1</div><div class="line">[ ! -z "$2" ] &amp;&amp; USER=$2</div><div class="line">[ ! -z "$3" ] &amp;&amp; PASSWORD=$3</div><div class="line"></div><div class="line"></div><div class="line">if [ "$OPERATOR" == "export" ]; then</div><div class="line">    action_export</div><div class="line">elif [ "$OPERATOR" == "import" ]; then</div><div class="line">    action_import</div><div class="line">elif [ "$OPERATOR" == "init" ]; then</div><div class="line">    action_init</div><div class="line">fi</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell写的脚本自动部署mysql&lt;br&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ngrok平台搭建</title>
    <link href="http://yoursite.com/2016/12/26/ngrok%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/12/26/ngrok平台搭建/</id>
    <published>2016-12-26T06:55:27.000Z</published>
    <updated>2017-07-26T06:56:20.467Z</updated>
    
    <content type="html"><![CDATA[<p>通过vps来搭建一个ngrok的服务端来进行微信的开发<br><a id="more"></a></p>
<h1 id="ngrok-搭建"><a href="#ngrok-搭建" class="headerlink" title="ngrok 搭建"></a>ngrok 搭建</h1><p><img src="http://o7ez1faxc.bkt.clouddn.com/2016-11-13-14790419806988.jpg" alt=""></p>
<p>之前反向代理的功能一直使用其他人搭建的服务来进行微信的开发，但是最近一段时间特别的不稳定，正好手里还有一台空闲VPS和域名，所以就萌生自己搭建服务器的念头。</p>
<h2 id="编译-ngrok"><a href="#编译-ngrok" class="headerlink" title="编译 ngrok"></a>编译 ngrok</h2><p>我的系统是ubuntu 16.04 LTS版本的，在编译之前我们需要安装以下的工具</p>
<blockquote>
<p>sudo apt-get install build-essential golang mercurial git</p>
</blockquote>
<p>获取ngrok的源码</p>
<blockquote>
<p><a href="https://github.com/inconshreveable/ngrok.git" target="_blank" rel="external">https://github.com/inconshreveable/ngrok.git</a> ngrok<br>cd ngrok</p>
</blockquote>
<p>在使用之前特地注册了一个域名ngrokc.top来映射vps的IP，在编译的时候我们需要将证书替换成自己新生成的，在创建证书的时候需要将域名修改成自己注册的域名。(之后使用的过程当中会利用这个证书来进行数据的加密，来保证安全性。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">NGROK_DOMAIN=<span class="string">"ngrokc.top"</span></div><div class="line">openssl genrsa -out base.key 2048</div><div class="line">openssl req -new -x509 -nodes -key base.key -days 10000 -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out base.pem</div><div class="line">openssl genrsa -out server.key 2048</div><div class="line">openssl req -new -key server.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out server.csr</div><div class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -CA base.pem -CAkey base.key -CAcreateserial -days 10000 -out server.crt</div><div class="line"></div><div class="line">cp base.pem assets/client/tls/ngrokroot.crt</div></pre></td></tr></table></figure>
<p>进行上面的操作之后，接下来我们就需要进行编译</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo make release-server release-client</div></pre></td></tr></table></figure>
<p>操作完成之后在bin目录下面会产生二个可执行的文件ngrokc(服务端)和ngrok(客户端）程序</p>
<p>为了能够让自己的客户端运行在不同的平台上面，我们要根据自己要使用的平台来分别使用下面的某一项指令进行操作。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//生成windows客户端</div><div class="line"></div><div class="line">sudo GOOS=windows GOARCH=386 make release-client</div><div class="line"></div><div class="line">//生成Linux客户端</div><div class="line"></div><div class="line"></div><div class="line">sudo GOOS=linux GOARCH=amd64 make release-client</div><div class="line"></div><div class="line">//生成树莓派客户端</div><div class="line"></div><div class="line">sudo GOOS=linux GOARCH=arm make release-client</div></pre></td></tr></table></figure>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>前面生成的ngrokd就是服务端的程序，我们在运行时需要通过参数来指定证书、域名和端口</p>
<blockquote>
<p>sudo ./bin/ngrokd -tlsKey=server.key -tlsCrt=server.crt -domain=”ngrokc.top” -httpAddr=”:8081” -httpsAddr=”:8082”</p>
</blockquote>
<p>执行上而把操作之后，我们的服务端也正式启动起来了，可以通过观察屏幕来获得更多的信息。httpAddr、httpsAddr分别是ngokc用来转发http和https的端口，可以根据自己的需要随意更改。同时默认开了一个4443端口用来与客户端的通信。</p>
<p>现在我们可以通过 <a href="https://server.ngrokc.top:8081" target="_blank" rel="external">https://server.ngrokc.top:8081</a> 和 <a href="https://server.ngrokc.top:8082" target="_blank" rel="external">https://server.ngrokc.top:8082</a> 来访问转发的服务，倘若你在浏览器当中输入以上的任意域名会输出下面的语句，表示你的服务已正式启动。</p>
<blockquote>
<p>Tunnel server.ngrokc.top:8081 not found</p>
</blockquote>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>启动客户端通过可以采用两种方式</p>
<ol>
<li>直接通过参数的方式来指定需要映射的端口</li>
<li>通过配置文件方式来进行指定相应的端<br>下面是一个ngrok的配置文件，其中server_addr是指定ngrok服务端的地址和通讯的端口，同时我们也映射了两个tcp的端口。</li>
</ol>
<p>ngrok.cfg配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server_addr: ngrokc.top:4443</div><div class="line">trust_host_root_certs: false</div><div class="line"></div><div class="line">tunnels:</div><div class="line">  ssh:</div><div class="line">    subdomain: server</div><div class="line">    proto:</div><div class="line">      tcp: 22</div><div class="line">  aria2c:</div><div class="line">    subdomain: server</div><div class="line">    proto:</div><div class="line">      tcp: 6800</div></pre></td></tr></table></figure>
<p>启动方式</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#调用下面的语句会自动从服务端生成两个端口用来映射本地的22和6800端口</span></div><div class="line">./ngrok -config=ngrok.cfg start ssh aria2c</div></pre></td></tr></table></figure>
<h3 id="指定多个配置文件"><a href="#指定多个配置文件" class="headerlink" title="指定多个配置文件"></a>指定多个配置文件</h3><p>ngrok可以指定多个配置文件，同时将几个配置文件进行合并然后从第一个配置文件开始逐步进行映射。</p>
<blockquote>
<p>ngrok start -config ~/ngrok.yml -config ~/projects/example/ngrok.yml demo admin</p>
</blockquote>
<h3 id="启动全部的通道"><a href="#启动全部的通道" class="headerlink" title="启动全部的通道"></a>启动全部的通道</h3><p>ngrok可以指定–all和–none来指定启动全部的通道或者不启动任何通道。</p>
<blockquote>
<p>ngrok start –al #启动全部的通道<br>ngrok start –none #不启动任何的通道</p>
</blockquote>
<h2 id="示例配置文件"><a href="#示例配置文件" class="headerlink" title="示例配置文件"></a>示例配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">authtoken: 4nq9771bPxe8ctg7LKr_2ClH7Y15Zqe4bWLWF9p</div><div class="line">region: us</div><div class="line">console_ui: true</div><div class="line">compress_conn: false</div><div class="line">http_proxy: false</div><div class="line">inspect_db_size: 50000000</div><div class="line">log_level: info</div><div class="line">log_format: json</div><div class="line">log: /var/log/ngrok.log</div><div class="line">metadata: &apos;&#123;&quot;serial&quot;: &quot;00012xa-33rUtz9&quot;, &quot;comment&quot;: &quot;For customer alan@example.com&quot;&#125;&apos;</div><div class="line">root_cas: trusted</div><div class="line">socks5_proxy: &quot;socks5://localhost:9150&quot;</div><div class="line">update: true</div><div class="line">update_channel: stable</div><div class="line">web_addr: localhost:4040</div><div class="line">tunnels:</div><div class="line"> website:</div><div class="line">   addr: 8888</div><div class="line">   auth: bob:bobpassword</div><div class="line">   bind_tls: true</div><div class="line">   host_header: &quot;myapp.dev&quot;</div><div class="line">   inspect: false</div><div class="line">   proto: http</div><div class="line">   subdomain: myapp</div><div class="line"> </div><div class="line"> e2etls:</div><div class="line">   addr: 9000</div><div class="line">   proto: tls</div><div class="line">   hostname: myapp.example.com</div><div class="line">   crt: example.crt</div><div class="line">   key: example.key</div><div class="line"> </div><div class="line"> ssh-access:</div><div class="line">   addr: 22</div><div class="line">   proto: tcp</div><div class="line">   remote_addr: 1.tcp.ngrok.io:12345</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过vps来搭建一个ngrok的服务端来进行微信的开发&lt;br&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>shell 动态进程守护</title>
    <link href="http://yoursite.com/2016/10/14/shell-%E5%8A%A8%E6%80%81%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4/"/>
    <id>http://yoursite.com/2016/10/14/shell-动态进程守护/</id>
    <published>2016-10-14T06:42:55.000Z</published>
    <updated>2017-07-26T06:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要用于openwrt里面的进程守护的脚本，检测程序是否运行，程序不存在就运行相应的脚本<br><a id="more"></a></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">config general general</div><div class="line">    option enable 1</div><div class="line"></div><div class="line">config monitor</div><div class="line">    option name &apos;scplc&apos;</div><div class="line">    option enable 1</div><div class="line">    option pschkstr &apos;sc-serv plc&apos;</div><div class="line">    option type     &apos;application&apos;</div><div class="line">    option tmpfile &apos;/tmp/monitor/plc.mon&apos;</div><div class="line">    option mqttkey &apos;/app/mon/plc/status&apos;</div><div class="line">    option timeLimit 60 </div><div class="line">    option execcmd &apos;&apos;</div><div class="line"></div><div class="line">config monitor</div><div class="line">    option name &apos;scgpio&apos;</div><div class="line">    option enable 1</div><div class="line">    option pschkstr &apos;sc-serv gpio&apos;</div><div class="line">    option type     &apos;application&apos;</div><div class="line">    option tmpfile &apos;/tmp/monitor/gpio.mon&apos;</div><div class="line">    option mqttkey &apos;/app/mon/gpio/status&apos;</div><div class="line">    option timeLimit 60 </div><div class="line">    option execcmd &apos;&apos;</div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div></pre></td><td class="code"><pre><div class="line">flash=<span class="string">"0"</span></div><div class="line"><span class="literal">true</span>=<span class="string">"1"</span></div><div class="line"><span class="literal">false</span>=<span class="string">"0"</span>;</div><div class="line"><span class="built_in">disable</span>=<span class="string">"0"</span></div><div class="line"><span class="built_in">enable</span>=<span class="string">"1"</span></div><div class="line">configName=<span class="string">"scmonitor"</span></div><div class="line"><span class="function"><span class="title">printHelp</span></span>()&#123;</div><div class="line">	clear</div><div class="line">	<span class="built_in">echo</span> <span class="string">"USAGE:"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"-g &lt;monitor type&gt; get current moitor enable status "</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"-l view current all montoir list"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"-s &lt;monitorName&gt; &lt;monitorValue&gt; set monitor state"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"-a autoManage "</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"-e enable cron"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"-d disable cron"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"add &lt;name&gt; &lt;enable&gt; &lt;pschkstr&gt; &lt;sevicename&gt; &lt;tmpfile&gt; &lt;mqttkey&gt; &lt;execcmd&gt; &lt;timeLimit&gt;"</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"example:"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"	check -l"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"			plc"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"			pjlink"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"   check -g plc"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"			current monitor state:0"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"   check -s plc 0"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#检测线程是否存在</span></div><div class="line"><span class="function"><span class="title">function_thread_check</span></span>()&#123;</div><div class="line">	<span class="comment">#count= $&#123;ps |grep 'sc-serv plc' | grep -v 'grep' | wc -l&#125;</span></div><div class="line">	count=$( ps | grep <span class="string">"$*"</span> | grep -v <span class="string">'grep'</span> | wc -l )</div><div class="line">	<span class="keyword">if</span> [ 0 == <span class="variable">$count</span> ];<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="literal">false</span></div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">echo</span> <span class="literal">true</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#获取当前所有模块的名称</span></div><div class="line"><span class="function"><span class="title">function_getMonitorList</span></span>()&#123;</div><div class="line">	count=$(uci get <span class="variable">$configName</span>.general.count)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$count</span>);</div><div class="line">	<span class="keyword">do</span></div><div class="line">		name=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].name)</div><div class="line">		<span class="built_in">echo</span> <span class="variable">$name</span></div><div class="line"></div><div class="line">	<span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#获取状态</span></div><div class="line"><span class="function"><span class="title">function_getMonitorStats</span></span>()&#123;</div><div class="line">    count=$(uci get <span class="variable">$configName</span>.general.count)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$count</span>);</div><div class="line">    <span class="keyword">do</span></div><div class="line">		name=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].name)</div><div class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$name</span>"</span> == <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">            state=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].<span class="built_in">enable</span>)</div><div class="line">            <span class="built_in">echo</span> <span class="variable">$1</span> stats is <span class="variable">$state</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">    <span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#获取当前的时间差</span></div><div class="line"><span class="function"><span class="title">function_getTimeCompare</span></span>()&#123;</div><div class="line">	currTime=$( date +%s)</div><div class="line">	lastTime=<span class="variable">$1</span></div><div class="line">	<span class="comment">#tmpTime= $("$currTime - $lastTime")</span></div><div class="line"></div><div class="line">	<span class="built_in">echo</span> $((<span class="variable">$currTime</span> - <span class="variable">$lastTime</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">function_setMonitorState</span></span>()&#123;</div><div class="line">	count=$(uci get <span class="variable">$configName</span>.general.count)</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$count</span>);</div><div class="line">	<span class="keyword">do</span></div><div class="line">		name=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].name)</div><div class="line">        old_sate=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].<span class="built_in">enable</span>)</div><div class="line">		<span class="keyword">if</span> [ <span class="string">"<span class="variable">$name</span>"</span> == <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">			state=$(uci <span class="built_in">set</span> <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].<span class="built_in">enable</span>=<span class="variable">$2</span>)</div><div class="line">            <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> set success"</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line">	<span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 自动化处理流程</span></div><div class="line"><span class="function"><span class="title">function_autoManage</span></span>()&#123;</div><div class="line">	count=$(uci get <span class="variable">$configName</span>.general.count)</div><div class="line">	monitorState=$(uci get <span class="variable">$configName</span>.general.enable)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$monitorState</span> == <span class="string">"0"</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"current server monitor disable"</span></div><div class="line">		<span class="built_in">return</span> </div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$count</span>);</div><div class="line">	<span class="keyword">do</span></div><div class="line">		name=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].name)</div><div class="line">        psChkstr=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].pschkstr)</div><div class="line">		tmpfile=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].tmpfile)</div><div class="line">        <span class="built_in">type</span>=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].<span class="built_in">type</span>)</div><div class="line">		result=$(function_thread_check <span class="variable">$psChkstr</span>)</div><div class="line">		MonitorStats=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].<span class="built_in">enable</span>)</div><div class="line"></div><div class="line">		<span class="keyword">if</span> [ <span class="string">"<span class="variable">$MonitorStats</span>"</span> == <span class="string">"<span class="variable">$disable</span>"</span> ]; <span class="keyword">then</span> </div><div class="line">			<span class="built_in">echo</span>  <span class="variable">$name</span> current Current status is <span class="built_in">disable</span> </div><div class="line">			<span class="built_in">continue</span>	</div><div class="line">		<span class="keyword">fi</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> [ <span class="string">"<span class="variable">$result</span>"</span> == <span class="string">"false"</span> ]; <span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"Services have been shut down, which is restarting"</span></div><div class="line">			<span class="comment">#execCmd=$(uci get sc-monitor.@monitor[$i].execcmd)</span></div><div class="line">			$(/etc/init.d/<span class="variable">$name</span> start)</div><div class="line">		<span class="keyword">else</span></div><div class="line">      <span class="keyword">if</span> [ <span class="variable">$type</span> == <span class="string">"application"</span> ]; <span class="keyword">then</span> <span class="comment">#application不做文件检测</span></div><div class="line">          <span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span> Operating normally"</span></div><div class="line">          <span class="built_in">continue</span></div><div class="line">      <span class="keyword">fi</span></div><div class="line"></div><div class="line">			<span class="keyword">if</span> [ ! -e <span class="string">"<span class="variable">$tmpfile</span>"</span> ]; <span class="keyword">then</span></div><div class="line">				$(/etc/init.d/<span class="variable">$name</span> stop)</div><div class="line">				$(/etc/init.d/<span class="variable">$name</span> start)</div><div class="line">				<span class="built_in">echo</span> <span class="string">"restart <span class="variable">$name</span> server"</span></div><div class="line">                <span class="built_in">continue</span></div><div class="line">			<span class="keyword">else</span></div><div class="line">				lastTime=$(cat <span class="variable">$tmpfile</span>)</div><div class="line">				timeLimit=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].timeLimit)</div><div class="line">				result=$(function_getTimeCompare <span class="variable">$lastTime</span> )</div><div class="line"></div><div class="line">				<span class="keyword">if</span> [ <span class="string">"<span class="variable">$result</span>"</span> -gt <span class="string">"<span class="variable">$timeLimit</span>"</span> ]; <span class="keyword">then</span>  <span class="comment">#如果当前返回的值大于允许值</span></div><div class="line">					$(rm -rf <span class="variable">$tmpfile</span>)</div><div class="line">					$(/etc/init.d/<span class="variable">$name</span> stop)</div><div class="line">					$(/etc/init.d/<span class="variable">$name</span> start)</div><div class="line">				<span class="keyword">fi</span></div><div class="line"></div><div class="line">				<span class="built_in">echo</span> <span class="variable">$result</span> <span class="variable">$timeLimit</span></div><div class="line">			<span class="keyword">fi</span></div><div class="line"></div><div class="line">		<span class="keyword">fi</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span> Operating normally"</span></div><div class="line">	<span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#移除服务</span></div><div class="line"><span class="function"><span class="title">function_removeMonitor</span></span>()&#123;</div><div class="line">	MonitorName=<span class="variable">$1</span></div><div class="line">	tmp=$(uci get <span class="variable">$configName</span>.general.count)</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$tmp</span>);</div><div class="line">	<span class="keyword">do</span></div><div class="line">		name=$(uci get <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>].name)</div><div class="line">		<span class="keyword">if</span> [ <span class="string">"<span class="variable">$name</span>"</span> == <span class="string">"<span class="variable">$MonitorName</span>"</span> ]; <span class="keyword">then</span></div><div class="line">			count=$((  <span class="variable">$tmp</span> - 1 ))</div><div class="line">			$(uci delete <span class="variable">$configName</span>.@monitor[<span class="variable">$i</span>])</div><div class="line">			$(uci <span class="built_in">set</span> <span class="variable">$configName</span>.general.count=<span class="variable">$count</span>)</div><div class="line">			$(uci commit <span class="variable">$configName</span>)</div><div class="line">		<span class="keyword">fi</span></div><div class="line">	<span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">function_EnableCron</span></span>()&#123;</div><div class="line">	$(uci <span class="built_in">set</span> <span class="variable">$configName</span>.general.enable=1)</div><div class="line">	$(uci commit <span class="variable">$configName</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">function_DisableCron</span></span>()&#123;</div><div class="line">	$(uci <span class="built_in">set</span> <span class="variable">$configName</span>.general.enable=1)</div><div class="line">	$(uci commit <span class="variable">$configName</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">[ <span class="string">"<span class="variable">$(cat /proc/uptime | awk -F. '&#123;print $1&#125;')</span>"</span> -gt 300 ] || <span class="built_in">exit</span> 0</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$#</span>"</span> -eq 0 ]; <span class="keyword">then</span></div><div class="line">	printHelp</div><div class="line">	<span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"-s"</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="keyword">if</span> [  <span class="string">"<span class="variable">$2</span>"</span> == <span class="string">""</span> ] || [ <span class="string">"<span class="variable">$3</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	function_setMonitorState <span class="variable">$2</span> <span class="variable">$3</span></div><div class="line">	<span class="built_in">exit</span> 1</div><div class="line"></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"add"</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="keyword">if</span> [ <span class="string">"<span class="variable">$2</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"plese input type"</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="keyword">if</span> [ <span class="string">"<span class="variable">$3</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"plese input eanbled"</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> [ <span class="string">"<span class="variable">$4</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"plese input pschkstr"</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="keyword">if</span> [ <span class="string">"<span class="variable">$5</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"plese input sevicename "</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="keyword">if</span> [ <span class="string">"<span class="variable">$6</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"plese input tmpfile"</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="keyword">if</span> [ <span class="string">"<span class="variable">$7</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"plese input mqttkey"</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="keyword">if</span> [ <span class="string">"<span class="variable">$8</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"plese input execcmd"</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="keyword">if</span> [ <span class="string">"<span class="variable">$9</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"plese input timeLimit"</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	tmp=$(uci get <span class="variable">$configName</span>.general.count)</div><div class="line">	<span class="comment">#$count=$(( $count + 1 ))</span></div><div class="line">	count=$((  <span class="variable">$tmp</span> + 1 ))</div><div class="line"></div><div class="line">	$(uci add <span class="variable">$configName</span> monitor)</div><div class="line">	$(uci add_list <span class="variable">$configName</span>.@monitor[<span class="variable">$count</span>].name=<span class="string">"<span class="variable">$2</span>"</span>)</div><div class="line">	$(uci add_list <span class="variable">$configName</span>.@monitor[<span class="variable">$count</span>].<span class="built_in">enable</span>=<span class="string">"<span class="variable">$3</span>"</span>)</div><div class="line">	$(uci add_list <span class="variable">$configName</span>.@monitor[<span class="variable">$count</span>].pschkstr=<span class="string">"<span class="variable">$4</span>"</span>)</div><div class="line">	$(uci add_list <span class="variable">$configName</span>.@monitor[<span class="variable">$count</span>].servicename=<span class="string">"<span class="variable">$5</span>"</span>)</div><div class="line">	$(uci add_list <span class="variable">$configName</span>.@monitor[<span class="variable">$count</span>].tmpfile=<span class="string">"<span class="variable">$6</span>"</span>)</div><div class="line">	$(uci add_list <span class="variable">$configName</span>.@monitor[<span class="variable">$count</span>].mqttkey=<span class="string">"<span class="variable">$7</span>"</span>)</div><div class="line">	$(uci add_list <span class="variable">$configName</span>.@monitor[<span class="variable">$count</span>].execcmd=<span class="string">"<span class="variable">$8</span>"</span>)</div><div class="line">	$(uci add_list <span class="variable">$configName</span>.@monitor[<span class="variable">$count</span>].timeLimit=<span class="string">"<span class="variable">$9</span>"</span>)</div><div class="line">	$(uci <span class="built_in">set</span> <span class="variable">$configName</span>.general.count=<span class="variable">$count</span>)</div><div class="line">	$(uci commit <span class="variable">$configName</span>)</div><div class="line">	<span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> g:s:lear:d opt</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="keyword">case</span> <span class="string">"<span class="variable">$opt</span>"</span> <span class="keyword">in</span></div><div class="line">		g)</div><div class="line">		function_getMonitorStats <span class="variable">$OPTARG</span></div><div class="line">		;;</div><div class="line">		e)</div><div class="line">		function_EnableCron</div><div class="line">		;;</div><div class="line">		d)	function_DisableCron</div><div class="line">		;;</div><div class="line">		l)</div><div class="line">		function_getMonitorList</div><div class="line">		;;</div><div class="line">		r)</div><div class="line">		function_removeMonitor <span class="variable">$OPTARG</span></div><div class="line">		;;</div><div class="line">		a)</div><div class="line">		function_autoManage</div><div class="line">		;;</div><div class="line">		?)</div><div class="line">		clear</div><div class="line">		printHelp ;;</div><div class="line">	<span class="keyword">esac</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要用于openwrt里面的进程守护的脚本，检测程序是否运行，程序不存在就运行相应的脚本&lt;br&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>利用scrapy和MongoDB来开发一个爬虫</title>
    <link href="http://yoursite.com/2016/07/26/%E5%88%A9%E7%94%A8scrapy%E5%92%8CMongoDB%E6%9D%A5%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2016/07/26/利用scrapy和MongoDB来开发一个爬虫/</id>
    <published>2016-07-26T07:43:54.000Z</published>
    <updated>2017-07-26T07:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们利用scrapy框架来抓取Stack Overflow里面最新的问题（问题标题和网址），并且将这些问题保存到MongoDb当中，直接提供给客户进行查询。<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们利用scrapy框架来抓取Stack Overflow里面最新的问题（问题标题和网址），并且将这些问题保存到MongoDb当中，直接提供给客户进行查询。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 匿名函数</title>
    <link href="http://yoursite.com/2016/07/26/python-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/07/26/python-匿名函数/</id>
    <published>2016-07-26T07:34:33.000Z</published>
    <updated>2017-07-26T07:35:30.900Z</updated>
    
    <content type="html"><![CDATA[<p>python 匿名函数<br><a id="more"></a></p>
<h1 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h1><p>lambda最开始接触的时候是在.net开发的时候，感觉简化了很多的工作里面繁琐，总感觉lambda类似于c的宏定义，只是功能更加强大。</p>
<h3 id="lambda-参数列表：表达式"><a href="#lambda-参数列表：表达式" class="headerlink" title="lambda 参数列表：表达式"></a>lambda 参数列表：表达式</h3><p>下面的代码的作用是对两个数进行相加，通过下面的片段我们可以发现lambda函数的参数列表在左侧并且采用逗号进行分隔</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sum=<span class="keyword">lambda</span> x,y,z:x+y+z</div><div class="line">print(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))<span class="comment">#返回6</span></div></pre></td></tr></table></figure>
<p>下面的代码段就是不用匿名函数时的传统方式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(x,y,z)</span>:</span></div><div class="line">	<span class="keyword">return</span> x+y+z</div><div class="line">	</div><div class="line">print(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</div></pre></td></tr></table></figure>
<p>###有关map()函数<br>map()有两个函数</p>
<blockquote>
<p>r = map(func, seq)</p>
</blockquote>
<p>func:是一个函数的名称<br>seq：是一个（如列表)序列<br>map函数将将seq中的每一个对象进行迭代进行调用 func函数并且返回结果值<br>下面的代码段是将一个列表里面的所有的值乘以平方</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(T)</span>:</span></div><div class="line">	<span class="keyword">return</span> T*T</div><div class="line">temperatures = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">temperatures_in_Fahrenheit = list(map(square, temperatures))</div><div class="line">print(temperatures_in_Fahrenheit) </div><div class="line"><span class="comment">#返回的值[1, 4, 9, 16, 25]</span></div></pre></td></tr></table></figure>
<p>下面我们用匿名方法来重写上面的功能</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">temperatures = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">temperatures_in_Fahrenheit = list(map(<span class="keyword">lambda</span> T:T*T, temperatures))</div><div class="line">print(temperatures_in_Fahrenheit)</div><div class="line"><span class="comment">#返回的值[1, 4, 9, 16, 25]</span></div></pre></td></tr></table></figure>
<p>map可以对不同的列表进行计算，但是列表的长度必须一致</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">b=[<span class="number">17</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>]</div><div class="line">c=[<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>,<span class="number">-4</span>]</div><div class="line">print(list(map(<span class="keyword">lambda</span> x,y:x+y,a,b)))<span class="comment">#[18, 14, 14, 14]</span></div><div class="line">print(list(map(<span class="keyword">lambda</span> x,y,z:x+y+z,a,b,c)))<span class="comment">#[17, 12, 11, 10]</span></div><div class="line">print(list(map(<span class="keyword">lambda</span> x,y,z : <span class="number">2.5</span>*x + <span class="number">2</span>*y - z, a,b,c)))<span class="comment">#[37.5, 31.0, 32.5, 34.0]</span></div></pre></td></tr></table></figure>
<h3 id="Filtering-函数"><a href="#Filtering-函数" class="headerlink" title="Filtering 函数"></a>Filtering 函数</h3><blockquote>
<p>filter(function, sequence) </p>
</blockquote>
<p>filter和map的函数一致，但是filter的功能是过滤掉sequence的列表中不符合function的对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fibonacci = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">34</span>,<span class="number">55</span>]</div><div class="line">odd_number=list(filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>,fibonacci))</div><div class="line">print(odd_number)<span class="comment">#[1, 1, 3, 5, 13, 21, 55]</span></div><div class="line">even_numbers = list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, fibonacci))</div><div class="line">print(even_numbers)<span class="comment">#[0, 2, 8, 34]</span></div></pre></td></tr></table></figure>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>下面的是一个常规的书店的购物车列表</p>
<table>
<thead>
<tr>
<th>订单号</th>
<th>书名和作者</th>
<th>数量</th>
<th>单价</th>
</tr>
</thead>
<tbody>
<tr>
<td>34587</td>
<td>C++ Primer,Stanley B. Lippman</td>
<td>2</td>
<td>85.8</td>
</tr>
<tr>
<td>2323</td>
<td>Visual C++ 入门，明日科技</td>
<td>4</td>
<td>88.8</td>
</tr>
<tr>
<td>2321</td>
<td>python 学习,岳恩</td>
<td>55</td>
<td>85</td>
</tr>
</tbody>
</table>
<p>1.写一个程序，倘若该订单的单价乘以总价没有大于100元的话就加上10元的运费</p>
<h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">orders = [ [<span class="string">"34587"</span>,<span class="string">"C++ Primer,Stanley B. Lippman"</span>, <span class="number">2</span>, <span class="number">40.95</span>], </div><div class="line">	   [<span class="string">"2323"</span>,<span class="string">"PVisual C++ 入门，明日科技"</span>, <span class="number">4</span>, <span class="number">88.80</span>], </div><div class="line">		   [<span class="string">"2321"</span>,<span class="string">"python 学习,岳恩"</span>,<span class="number">55</span>,<span class="number">85</span>]]</div><div class="line"></div><div class="line">min_order = <span class="number">100</span></div><div class="line"></div><div class="line"></div><div class="line">invoice_totals=list(map(<span class="keyword">lambda</span> x:x <span class="keyword">if</span> x[<span class="number">1</span>]&gt;=min_order <span class="keyword">else</span> (x[<span class="number">0</span>],x[<span class="number">1</span>]+<span class="number">10</span>), map(<span class="keyword">lambda</span> x:(x[<span class="number">0</span>],x[<span class="number">2</span>]*x[<span class="number">3</span>]),orders)))</div><div class="line">print(invoice_totals)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 匿名函数&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>node-mysql 操作</title>
    <link href="http://yoursite.com/2016/07/26/node-mysql-%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/07/26/node-mysql-操作/</id>
    <published>2016-07-26T07:01:05.000Z</published>
    <updated>2017-07-26T07:01:32.764Z</updated>
    
    <content type="html"><![CDATA[<p> node.js mysql操作<br> <a id="more"></a></p>
<h4 id="安装node-mysql"><a href="#安装node-mysql" class="headerlink" title="安装node-mysql"></a>安装node-mysql</h4><p>在node.js采用npm的方式来进行模块的安装。node.js安装的话有两种方式可以通过-g的方式进行全局的安装，在这种模式下安装的模块可以被整个node.js的程序所引用。如果不加-g的话nodejs会在当前的目录下新建一个node_modules文件夹，并且将下载的模块放置在该文件夹下相应的目录.</p>
<blockquote>
<p>npm install mysql -g //全局安装<br>npm install mysql –save //下载至当前的目录下</p>
</blockquote>
<h4 id="运行第一个mysql-查询"><a href="#运行第一个mysql-查询" class="headerlink" title="运行第一个mysql 查询"></a>运行第一个mysql 查询</h4><p>为了方便我将mysql的root密码设置为123456，在node数据库当中新建了一张名为users的表,建表的语句与如所示。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8;</div><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">--  Table structure for `users`</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=latin1;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">--  Records of `users`</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">BEGIN</span>;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="string">'zs'</span>, <span class="string">'1'</span>, <span class="string">'123456'</span>), (<span class="string">'ls'</span>, <span class="string">'2'</span>, <span class="string">'12345'</span>);</div><div class="line"><span class="keyword">COMMIT</span>;</div><div class="line"></div><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql=<span class="built_in">require</span>(<span class="string">'mysql'</span>);</div><div class="line"><span class="keyword">var</span> connection=mysql.createConnection(</div><div class="line">    &#123;</div><div class="line">        <span class="attr">host</span>:<span class="string">'localhost'</span>,</div><div class="line">        <span class="attr">user</span>:<span class="string">'root'</span>,</div><div class="line">        <span class="attr">password</span>:<span class="string">'123456'</span>,</div><div class="line">        <span class="attr">database</span>:<span class="string">'node'</span></div><div class="line">    &#125;</div><div class="line">);</div><div class="line">connection.connect();</div><div class="line"><span class="keyword">var</span> queryString=<span class="string">'SELECT * FROM users'</span>;</div><div class="line">connection.query(queryString,<span class="function"><span class="keyword">function</span>(<span class="params">err,rows,fields</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> rows)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'user name'</span>,rows[i].name);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>同样的我们在创建createConnection连接时可以使用字符串来替代对象的方式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connection=mysql.createConnection(<span class="string">'mysql://user:pass@host/node'</span>）;</div></pre></td></tr></table></figure>
<p>通过遍历查询的结果我们可以查询到每个字段（在上面的用例当中我们显示的是name)</p>
<blockquote>
<p>console.log(‘user name’,rows[i].name);</p>
</blockquote>
<p>query用于mysql的查询，在这里面我们使用了匿名函数的方式进行操作，一旦触及到查询的操作时会自动回调到该匿名事件当中，其中err,fields和rows分别用于显示相应的状态。</p>
<p>对于 上面的操作是将查询所有的行之后再进行回调，倘若我们需要对其中的每一行进行处理的话，我们可以采用下面的方式进行。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql=<span class="built_in">require</span>(<span class="string">'mysql'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> connection=mysql.createConnection(</div><div class="line">    &#123;</div><div class="line">        <span class="attr">host</span>:<span class="string">'localhost'</span>,</div><div class="line">        <span class="attr">user</span>:<span class="string">'root'</span>,</div><div class="line">        <span class="attr">password</span>:<span class="string">'a63621375'</span>,</div><div class="line">        <span class="attr">database</span>:<span class="string">'node'</span></div><div class="line">    &#125;</div><div class="line">);</div><div class="line">connection.connect();</div><div class="line"><span class="keyword">var</span> queryString=<span class="string">'SELECT * FROM users'</span>;</div><div class="line"><span class="keyword">var</span> query=connection.query(<span class="string">'select * from users'</span>);</div><div class="line">query.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="keyword">throw</span> err;</div><div class="line">&#125;);</div><div class="line">query.on(<span class="string">'fields'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">fields</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(fields);</div><div class="line">&#125;);</div><div class="line">query.on(<span class="string">'result'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">row</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(row.name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>有的时候我们需要对某一行进行处理时，为了不影响其他的数据，我们不得不对查询进行暂停进行相应的处理之后再进行恢复。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">query.on(<span class="string">'result'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">row</span>) </span>&#123;</div><div class="line">    connection.pause();</div><div class="line">    <span class="comment">// 指定处理的代码</span></div><div class="line">    <span class="built_in">console</span>.log(row);</div><div class="line">    connection.resume();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="通过条件来查询值"><a href="#通过条件来查询值" class="headerlink" title="通过条件来查询值"></a>通过条件来查询值</h4><p>有的时候我们需要采用指定查询的条件来过滤不需要的数据，同时我们要避免出现sql注入，在node-mysql当中有两种方式进行条件查询，第一种采用？来显示</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connection.connect();</div><div class="line"> </div><div class="line"><span class="keyword">var</span> key = <span class="string">'zs'</span>; </div><div class="line"><span class="keyword">var</span> queryString = <span class="string">'SELECT * FROM users WHERE names = ?'</span>;</div><div class="line"> </div><div class="line">connection.query(queryString, [key], <span class="function"><span class="keyword">function</span>(<span class="params">err, rows, fields</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> rows) &#123;</div><div class="line">        <span class="built_in">console</span>.log(rows[i]);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">connection.end();</div></pre></td></tr></table></figure>
<p>另一种方式是采用conection.escape()的方式 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">connection.connect();</div><div class="line"> </div><div class="line">var key = &apos;zs&apos;; </div><div class="line">var queryString = &apos;SELECT * FROM users WHERE name = &apos; + </div><div class="line">                   connection.escape(key);</div><div class="line"> </div><div class="line">connection.query(queryString, function(err, rows, fields) &#123;</div><div class="line">    if (err) throw err;</div><div class="line"> </div><div class="line">    for (var i in rows) &#123;</div><div class="line">        console.log(rows[i]);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user=&#123;<span class="attr">name</span>:<span class="string">"ll"</span>,<span class="attr">password</span>:<span class="string">"1234adsf"</span>&#125;;</div><div class="line"><span class="keyword">var</span> query=connection.query(<span class="string">'insert into users set ?'</span>,user,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(query.sql);</div></pre></td></tr></table></figure>
<blockquote>
<p>insert into users set <code>name</code> = ‘ll’, <code>password</code> = ‘1234adsf’ //输出的query.sql语句</p>
</blockquote>
<h4 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h4><p>在操作完成之后我们需要对mysql进行关闭，同时我们必须要对一些非正常关闭进行相应的处理。</p>
<pre><code class="js"><span class="comment">//不管是正常或者非正常的关闭都会触发close这个回调事件，</span>
<span class="comment">//我们可以在触发close操作之后检查关闭的原因从而进行相应的处理</span>
connection.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>{
  <span class="keyword">if</span> (err) {
    <span class="comment">//倘若出现非正常关闭我们重新进行连接 </span>
    connection = mysql.createConnection(connection.config);
  } <span class="keyword">else</span> {
    <span class="built_in">console</span>.log(<span class="string">'正常关闭.'</span>);
  }
});
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; node.js mysql操作&lt;br&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>python 爬虫 下载豆瓣歌单</title>
    <link href="http://yoursite.com/2016/05/26/python-%E7%88%AC%E8%99%AB-%E4%B8%8B%E8%BD%BD%E8%B1%86%E7%93%A3%E6%AD%8C%E5%8D%95/"/>
    <id>http://yoursite.com/2016/05/26/python-爬虫-下载豆瓣歌单/</id>
    <published>2016-05-26T07:37:19.000Z</published>
    <updated>2017-07-26T07:37:42.180Z</updated>
    
    <content type="html"><![CDATA[<p>多线程下载douban歌单，BeautifulSoup解析标签<br><a id="more"></a><br>运行的时候输入歌单的网址：<a href="https://music.douban.com/programme/9574867?sid=#play，爬虫会自动抓取页面中所有音乐的下载链接" target="_blank" rel="external">https://music.douban.com/programme/9574867?sid=#play，爬虫会自动抓取页面中所有音乐的下载链接</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> simplejson <span class="keyword">as</span> json</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> queue</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">myQueue=queue.Queue()</div><div class="line">MusicList=[]</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Music</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,title,DownUri)</span>:</span></div><div class="line">        self.title=title</div><div class="line">        self.DownUri=DownUri</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,records, page_num)</span>:</span></div><div class="line">        threading.Thread.__init__(self, name=page_num)</div><div class="line">        self._records =records</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span>(self._records.qsize()):</div><div class="line">            <span class="comment">#page=read_page(url,self._records.get())</span></div><div class="line">            <span class="comment">#read_tag(page,tag)</span></div><div class="line">            ll=self._records.get()</div><div class="line">            print(ll.title,<span class="string">"正在下载"</span>)</div><div class="line">            DownMusicFile(ll.DownUri,ll.title)</div><div class="line">            print(ll.title,<span class="string">"下载完成"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Resulturi</span><span class="params">(songid,ssid)</span>:</span></div><div class="line">    uri=<span class="string">'https://music.douban.com/j/songlist/get_song_url?sid=%s&amp;ssid=%s'</span>%(songid,ssid)</div><div class="line">    content=json.loads(requests.session().get(uri).content)[<span class="string">'r'</span>]</div><div class="line">    <span class="keyword">return</span> content</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetDown</span><span class="params">(MusicUri)</span>:</span></div><div class="line">    page=requests.session().get(MusicUri)</div><div class="line">    content=page.content</div><div class="line">    soup=BeautifulSoup(content,<span class="string">"html5lib"</span>)</div><div class="line">    link = soup.find_all(<span class="string">"div"</span>,<span class="string">"song-item"</span>)</div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> link:</div><div class="line">        <span class="comment">#print(i['data-index'],i['data-title'],i['data-performer'],i['data-songid'],i['data-ssid'])</span></div><div class="line">        DownUri=Resulturi(s[<span class="string">'data-songid'</span>],s[<span class="string">'data-ssid'</span>])</div><div class="line">        tmp=Music(s[<span class="string">'data-title'</span>],DownUri)</div><div class="line">        myQueue.put(tmp)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">DownMusicFile</span><span class="params">(uri,title)</span>:</span></div><div class="line">    r=requests.get(uri,stream=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">with</span> open(os.getcwd()+<span class="string">'/'</span>+title+<span class="string">".mp4"</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> fd:</div><div class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content():</div><div class="line">            fd.write(chunk)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reptile</span><span class="params">(records,threadNum)</span>:</span></div><div class="line">    tasks=[]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> page_num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">        Thread=MyThread(records,page_num)</div><div class="line">        Thread.setDaemon(<span class="keyword">False</span>)</div><div class="line">        Thread.start()</div><div class="line">        tasks.append(Thread)</div><div class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</div><div class="line">        <span class="keyword">if</span> task.isAlive():</div><div class="line">            tasks.append(task)</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    MusicUri=input(<span class="string">"请输入需要下载的专辑网址"</span>)</div><div class="line">    GetDown(MusicUri)</div><div class="line">    reptile(myQueue,<span class="number">10</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多线程下载douban歌单，BeautifulSoup解析标签&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 爬虫抓取v2ex的所有文章</title>
    <link href="http://yoursite.com/2016/05/26/scrapy-%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96v2ex%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2016/05/26/scrapy-爬虫抓取v2ex的所有文章/</id>
    <published>2016-05-26T07:36:11.000Z</published>
    <updated>2017-07-26T07:36:37.796Z</updated>
    
    <content type="html"><![CDATA[<p>利用scrapy进行抓取v2ex的所有的文章，其中包含了基本的scrapy的用法，以及处理出现request 403错误的解决<br><a id="more"></a></p>
<h1 id="v2exScray"><a href="#v2exScray" class="headerlink" title="v2exScray"></a>v2exScray</h1><p>项目代码全部上传到<a href="https://github.com/wenchangshou2/v2exScray" target="_blank" rel="external">github</a><br>这个项目的作用是将v2ex的所有的文章全部爬取下来最终抓取到的内容如下图所示<br><img src="http://o7ez1faxc.bkt.clouddn.com/2016-05-19-屏幕快照 2016-05-19 下午4.16.05.png" alt="屏幕快照 2016-05-19 下午4.16.05"></p>
<h2 id="文件的目录"><a href="#文件的目录" class="headerlink" title="文件的目录"></a>文件的目录</h2><p><img src="http://o7ez1faxc.bkt.clouddn.com/2016-05-19-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-05-19%20%E4%B8%8B%E5%8D%883.57.30.png" alt="屏幕快照 2016-05-19 下午3.57.30"></p>
<h2 id="创建爬虫项目"><a href="#创建爬虫项目" class="headerlink" title="创建爬虫项目"></a>创建爬虫项目</h2><p>scrapy创建工程的方式特别的简单，只要在shell下面输入下面的语句<br><img src="http://o7ez1faxc.bkt.clouddn.com/2016-05-19-屏幕快照 2016-05-19 下午5.01.30.png" alt="屏幕快照 2016-05-19 下午5.01.30"></p>
<p>执行成功之后会自动创建我们工程所需要的文件</p>
<p><img src="http://o7ez1faxc.bkt.clouddn.com/2016-05-19-屏幕快照 2016-05-19 下午5.02.05.png" alt="屏幕快照 2016-05-19 下午5.02.05"></p>
<h2 id="解决403的错误"><a href="#解决403的错误" class="headerlink" title="解决403的错误"></a>解决403的错误</h2><p>在抓取的过程当中返回的都是403的错误，网站采用了防爬技术anti-web-crawling technique（Amazon所用),后来通过通过队列的形式随机更换user_aget来发送请求来解决这个问题</p>
<p>我们需要使用下面的rotate_useragent.py的代码来进行更换请求的头，同时需要在settings.py里面将DOWNLOADER_MIDDLEWARES的注释去掉并且进行更正成正确的引用 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    <span class="string">'v2ex.rotate_useragent.RotateUserAgentMiddleware'</span>: <span class="number">400</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>rotate_useragent.py文件的代码</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*-coding:utf-8-*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> scrapy.contrib.downloadermiddleware.useragent <span class="keyword">import</span> UserAgentMiddleware</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotateUserAgentMiddleware</span><span class="params">(UserAgentMiddleware)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user_agent=<span class="string">''</span>)</span>:</span></div><div class="line">        self.user_agent = user_agent</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="comment">#这句话用于随机选择user-agent</span></div><div class="line">        ua = random.choice(self.user_agent_list)</div><div class="line">        <span class="keyword">if</span> ua:</div><div class="line">            request.headers.setdefault(<span class="string">'User-Agent'</span>, ua)</div><div class="line"></div><div class="line">    <span class="comment">#the default user_agent_list composes chrome,I E,firefox,Mozilla,opera,netscape</span></div><div class="line">    <span class="comment">#for more user agent strings,you can find it in http://www.useragentstring.com/pages/useragentstring.php</span></div><div class="line">    user_agent_list = [\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"</span>\</div><div class="line">        <span class="string">"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKithttp://o7ez1faxc.bkt.clouddn.com/2016-05-19-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-05-19%20%E4%B8%8B%E5%8D%884.16.05.png/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>,\</div><div class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span></div><div class="line">       ]</div></pre></td></tr></table></figure>
<p>I## items配置<br>items.py里面定义了我们需要爬取的元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Item,Field</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TencentItem</span><span class="params">(Item)</span>:</span></div><div class="line">    title=Field() <span class="comment">#文档标题</span></div><div class="line">    url=Field()  <span class="comment">#文章的链接</span></div></pre></td></tr></table></figure>
<h2 id="最终元素的保存"><a href="#最终元素的保存" class="headerlink" title="最终元素的保存"></a>最终元素的保存</h2><p>在scrapy里面会有一个piplines.py文章，爬虫会将抓取到的元素调用这个文件里面的函数进行存储</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonWithEncodingTencentPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.file = codecs.open(<span class="string">'v2ex.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)<span class="comment">#设置encoding来防止乱码</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        line = json.dumps(dict(item), ensure_ascii=<span class="keyword">False</span>) + <span class="string">"\n"</span><span class="comment">#ensure_ascii为true的话输出的是一个ascii字符，想输出中文的话需要将其设置为False</span></div><div class="line">        self.file.write(line)</div><div class="line">        <span class="keyword">return</span> item</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_closed</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.file.close(</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="爬虫的代码"><a href="#爬虫的代码" class="headerlink" title="爬虫的代码"></a>爬虫的代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">rules = [</div><div class="line">       Rule(</div><div class="line">           sle(allow=(<span class="string">"recent\?p=\d&#123;1,5&#125;"</span>)), follow=<span class="keyword">True</span>, callback=<span class="string">'parse_item'</span>)</div><div class="line">   ]</div></pre></td></tr></table></figure>
<p>下面是rule的源代码,当flollow为True的时候会自动调用 callback的函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> follow <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    self.follow = <span class="keyword">False</span> <span class="keyword">if</span> callback <span class="keyword">else</span> <span class="keyword">True</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    self.follow = follow</div></pre></td></tr></table></figure>
<p>下面的是一篇文章的html的标记,我们现在需要取出所有div中class为’cell item’的元素，然后进行遍历<br>然后再分别取出item_title的text和href的内容</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell item"</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"48"</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>[</div><div class="line">![](//cdn.v2ex.co/avatar/2dff/59fb/128998_normal.png?m=1446796863)](/member/jiangew)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"auto"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item_title"</span>&gt;</span>[</div><div class="line">跳槽季：北京~Java~4 年~服务端码农](/t/279762#reply6)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sep5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"small fade"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"votes"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>[</div><div class="line">Java](/go/java)  **[jiangew](/member/jiangew)** 2 分钟前  最后回复来自</div><div class="line">**[feiyang21687](/member/feiyang21687)**<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"70"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></div><div class="line">[6](/t/279762#reply6)</div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>获取内容的代码</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sites_even = sel.css(<span class="string">'div.cell.item'</span>)</div><div class="line"></div><div class="line">       <span class="keyword">for</span> site <span class="keyword">in</span> sites_even:</div><div class="line">           item=TencentItem()</div><div class="line">           item[<span class="string">'title'</span>]=site.css(<span class="string">'.item_title a'</span>).xpath(<span class="string">'text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">           item[<span class="string">'url'</span>]=<span class="string">'http://v2ex.com'</span>+site.css(<span class="string">'.item_title a'</span>).xpath(<span class="string">'@href'</span>).extract()[<span class="number">0</span>]</div><div class="line"></div><div class="line">           items.append(item)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用scrapy进行抓取v2ex的所有的文章，其中包含了基本的scrapy的用法，以及处理出现request 403错误的解决&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>docker 初级教程</title>
    <link href="http://yoursite.com/2016/03/26/docker-%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/03/26/docker-初级教程/</id>
    <published>2016-03-26T07:38:21.000Z</published>
    <updated>2017-07-26T07:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>hub.docker.com的注册以及容器镜像的操作<br><a id="more"></a></p>
<p>##注册hub.docker.com</p>
<p>点击<a href="https://hub.docker.com/register/" target="_blank" rel="external">https://hub.docker.com/register</a>进入注册的页面</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-20-屏幕快照 2016-04-20 上午10.30.55.png" alt="屏幕快照 2016-04-20 上午10.30.55"></p>
<p>当输入相应的用户名 邮箱和密码之后,docker会发送一封邮件到您的邮箱当中 。</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-20-屏幕快照 2016-04-20 上午10.33.42.png" alt="屏幕快照 2016-04-20 上午10.33.42"></p>
<p>点击“confirm your Email”之后就完成了相应的注册</p>
<p>浏览打开<a href="https://hub.docker.com/login/" target="_blank" rel="external">https://hub.docker.com/login/</a>输入注册时相应的用户名和密码，并且进行登录 </p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-20-屏幕快照 2016-04-20 上午10.34.55.png" alt="屏幕快照 2016-04-20 上午10.34.55"></p>
<p>最终的界面 </p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-20-屏幕快照 2016-04-20 上午10.35.35.png" alt="屏幕快照 2016-04-20 上午10.35.35"></p>
<h2 id="安装DockerToolbox工具"><a href="#安装DockerToolbox工具" class="headerlink" title="安装DockerToolbox工具"></a>安装DockerToolbox工具</h2><p>我们进入<a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="external">https://www.docker.com/products/docker-toolbox</a>,根据系统的不同来下载相应的软件</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.16.27.png" alt="屏幕快照 2016-04-21 上午11.16.27"></p>
<p>接下来我们打开所下载下来的安装文件，会进入下面的界面</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.17.57.png" alt="屏幕快照 2016-04-21 上午11.17.57"></p>
<p>默认点击继续</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.18.16.png" alt="屏幕快照 2016-04-21 上午11.18.16"></p>
<p>默认点击继续</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.18.27.png" alt="屏幕快照 2016-04-21 上午11.18.27"></p>
<p>到达如上图所示的界面时我们点击<strong>Docker Quickstart Terminal</strong>，并可以启动一个Docker容器</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.18.57.png" alt="屏幕快照 2016-04-21 上午11.18.57"></p>
<p>启动完成之后会进入下面的界面</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.20.02.png" alt="屏幕快照 2016-04-21 上午11.20.02"></p>
<p>下图所示的是我们安装的docker容器的版本信息</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.20.18.png" alt="屏幕快照 2016-04-21 上午11.20.18"></p>
<p>##运行一个容器<br>我们使用docker images 可以查看当前所有的镜像，因为是初装的原因没有任何的镜像 </p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.26.26.png" alt="屏幕快照 2016-04-21 上午11.26.26"></p>
<p>这里我们需要安装一个镜像 ，比如我们需要安装一个Ubuntu的镜像，我们仅需要通过pull ubuntu的命令即可,下面的界面是docker正在获取镜像。</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.28.28.png" alt="屏幕快照 2016-04-21 上午11.28.28"></p>
<p>当获取完成之后，我们可以通过使用<strong>docker images</strong>命令来获取当前的所有的镜像,下面的ubuntu并是我们 刚才获取到的镜像。<br>镜像是静态的形式，我们将其运行起来，运行的镜像又被称做<strong>容器</strong>。</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.31.32.png" alt="屏幕快照 2016-04-21 上午11.31.32"><br>采用run的命令来运行一个容器</p>
<blockquote>
<p>docker run -it ubuntu</p>
</blockquote>
<p>这里我们可以看到用户名已经变成root了，这表示我们已经进入了容器的内部</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.34.40.png" alt="屏幕快照 2016-04-21 上午11.34.40"></p>
<p>容器是单独隔离的，你在其中做任何的操作都不会影响到原来的系统。</p>
<p>例如：对其进行安装一个nginx的服务器</p>
<blockquote>
<p>sudo apt-get install -y nginx</p>
</blockquote>
<p>完成后我们执行nginx -v 会返现nginx已经安装完成 </p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.37.26.png" alt="屏幕快照 2016-04-21 上午11.37.26"></p>
<p>##将容器转化为镜像</p>
<p>在上一个环境我们已经在容器当中 安装了一个nginx，<strong>容器是一个运行时的环境，一旦退出当前所有的操作都会丢失。</strong>这里我们需要将其转换成一个镜像。</p>
<p>我们在刚才运行的终端当中调用 exit来退出容器</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.39.43.png" alt="屏幕快照 2016-04-21 上午11.39.43"></p>
<p>每个窗口都会有一个ID，通过这个ID来辨识不同的容器对象，也是我们将其操作的标识。通过调用 一个ps命令可以查看当中运行的容器。附带一个-a表示曾经运行过的容器。</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.42.15.png" alt="屏幕快照 2016-04-21 上午11.42.15"></p>
<p>commit是将容器转换成镜像的命令。通过下列的命令我们将容器转换成一个镜像</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.44.10.png" alt="屏幕快照 2016-04-21 上午11.44.10"></p>
<p>其中-m 参数用于提交时的备注信息，-a是指定用户信息；f76e0ef497c9代表的是容器的ID；wenchangshou/sta†ic_web:v1 指定目标镜像的用户名、仓库名和tag信息。</p>
<p>创建成功后会返回这个镜像的ID。其中的wenchangshou需要换成你自己注册时的用户名</p>
<p>通过调用docker images，可以看出多了一个wenchangshou/static_web的镜像</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.46.41.png" alt="屏幕快照 2016-04-21 上午11.46.41"></p>
<p>我们运行**docker run -it wenchangshou/static_web 就会运行一个已经安装好nginx的容器</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.48.24.png" alt="屏幕快照 2016-04-21 上午11.48.24"></p>
<p>##提交镜像到Docker Hub</p>
<p>这里我们需要将刚才所创建的镜像上传到<a href="https://hub.docker.com/" target="_blank" rel="external">https://hub.docker.com/</a></p>
<p>在操作之前我们需要在终端里面登录 </p>
<blockquote>
<p>docker login</p>
</blockquote>
<p>输出上面的命令之后终端会要求我们输入相应的Username、password、email，成功之后会提示Login Seccess</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.53.22.png" alt="屏幕快照 2016-04-21 上午11.53.22"></p>
<p>这时我们需刚刚的创建的镜像推送到hub.docker当中，我们使用下面的命令</p>
<blockquote>
<p>docker push </p>
</blockquote>
<p>上传成功之后会输出下列的信息</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.56.16.png" alt="屏幕快照 2016-04-21 上午11.56.16"></p>
<p>这里我们进入 hub.docker的网站发现刚才所推荐的镜像已经推送成功。</p>
<p><img src="http://7xrkms.com1.z0.glb.clouddn.com/2016-04-21-屏幕快照 2016-04-21 上午11.57.05.png" alt="屏幕快照 2016-04-21 上午11.57.05"></p>
<p>推送成功之后，我们在其他的电脑当中使用下列的命令，就会一键接收一个已经安装nginx的镜像。</p>
<blockquote>
<p>docker pull wenchangshou/static_web</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hub.docker.com的注册以及容器镜像的操作&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>python实现一个简单的爬虫搜索功能</title>
    <link href="http://yoursite.com/2015/07/26/python%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2015/07/26/python实现一个简单的爬虫搜索功能/</id>
    <published>2015-07-26T07:39:32.000Z</published>
    <updated>2017-07-26T07:40:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>精简的爬虫搜索<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser  </div><div class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen  </div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkParser</span><span class="params">(HTMLParser)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span><span class="params">(self, tag, attrs)</span>:</span></div><div class="line">        <span class="keyword">if</span> tag == <span class="string">'a'</span>:</div><div class="line">            <span class="keyword">for</span> (key, value) <span class="keyword">in</span> attrs:</div><div class="line">                <span class="keyword">if</span> key == <span class="string">'href'</span>:</div><div class="line"></div><div class="line">                    newUrl = parse.urljoin(self.baseUrl, value)</div><div class="line">                    self.links = self.links + [newUrl]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLinks</span><span class="params">(self, url)</span>:</span></div><div class="line">        self.links = []</div><div class="line">        self.baseUrl = url</div><div class="line">        response = urlopen(url)</div><div class="line">        <span class="keyword">if</span> response.getheader(<span class="string">'Content-Type'</span>)==<span class="string">'text/html; charset=UTF-8'</span>:</div><div class="line">            htmlBytes = response.read()</div><div class="line">            htmlString = htmlBytes.decode(<span class="string">"utf-8"</span>)</div><div class="line">            self.feed(htmlString)</div><div class="line">            <span class="keyword">return</span> htmlString, self.links</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>,[]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(url, word, maxPages)</span>:</span>  </div><div class="line">    pagesToVisit = [url]</div><div class="line">    numberVisited = <span class="number">0</span></div><div class="line">    foundWord = <span class="number">4</span></div><div class="line">    <span class="keyword">while</span> numberVisited &lt; maxPages <span class="keyword">and</span> pagesToVisit != [] <span class="keyword">and</span> <span class="keyword">not</span> foundWord:</div><div class="line">        numberVisited = numberVisited +<span class="number">1</span></div><div class="line">        url = pagesToVisit[<span class="number">0</span>]</div><div class="line">        pagesToVisit = pagesToVisit[<span class="number">1</span>:]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(numberVisited, <span class="string">"搜索页:"</span>, url)</div><div class="line">            parser = LinkParser()</div><div class="line">            data, links = parser.getLinks(url)</div><div class="line">            <span class="comment">#print("data:",links)</span></div><div class="line">            pagesToVisit = pagesToVisit + links</div><div class="line">            <span class="keyword">if</span> data.find(word)&gt;<span class="number">-1</span>:</div><div class="line">                foundWord = <span class="keyword">True</span></div><div class="line">                pagesToVisit = pagesToVisit + links</div><div class="line">                print(<span class="string">" **成功!**"</span>)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">" **错误!**"</span>)</div><div class="line">    <span class="keyword">if</span> foundWord:</div><div class="line">        print(<span class="string">"该关键字"</span>, word, <span class="string">"搜索失败"</span>, url)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"没有找到任何有关的网页"</span>)</div><div class="line">spider(<span class="string">"http://yuedu.fm/"</span>,<span class="string">"夏洛特"</span>,<span class="number">100</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;精简的爬虫搜索&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
